<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mark&#39;s Note</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://markvalen.github.io/"/>
  <updated>2017-12-31T13:27:42.323Z</updated>
  <id>https://markvalen.github.io/</id>
  
  <author>
    <name>Mark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单看看HTML</title>
    <link href="https://markvalen.github.io/2017/12/31/simple-html/"/>
    <id>https://markvalen.github.io/2017/12/31/simple-html/</id>
    <published>2017-12-31T13:21:40.000Z</published>
    <updated>2017-12-31T13:27:42.323Z</updated>
    
    <content type="html"><![CDATA[<p>前端方面的技术对我一直是一片空白区，本着越不熟悉的东西越能开拓眼界的想法，决定投入些时间学习一下。实际上react等等名词也是听烂了，好奇心驱使下也想去探究一番大家嘴里都在说的究竟是什么。还有一部分动机也是对组里现有Web项目的前端从技术选择到工程实现的全面厌恶(都不是品味差不差的问题了，是根本就没有品味)。正好趁着元旦假期女朋友回家，比较系统的接触一下。既然前端是有三驾马车HTML、CSS和Javascript，就先从网页的结构HTML入手。</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>Terminology!</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML全称Hyper Text Markup Language，即超文本标记语言。HTML通过标记(markup)描述网页的<strong>结构</strong>。</p><h2 id="元素-element"><a href="#元素-element" class="headerlink" title="元素(element)"></a>元素(element)</h2><p>元素是HTML页面的基本构建单元(building blocks)，通过标签(tag)来表示。一个元素通常包含两个部分，一是表示元素所使用的标签，二是元素的内容(content)，也就是这种形式<code>&lt;tag&gt;content&lt;/tag&gt;</code>。</p><h2 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签(tag)"></a>标签(tag)</h2><p>标签就是HTML中的M。HTML页面本身实际上就是一个文档，当浏览器阅读这种文档时，会通过里面的标签来决定文档应该如何展示。这进一步说明HTML只用来定义网页的<strong>结构</strong>。</p><h2 id="属性-attribute"><a href="#属性-attribute" class="headerlink" title="属性(attribute)"></a>属性(attribute)</h2><p>属性提供了关于元素的<strong>额外信息</strong>，元素是被标签定义的，而标签本身只有有限的信息，通过属性能对一个元素提供更多的信息。</p><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p>Block级别的元素总是从新的一行开始并且会占据所有可用的宽度。</p><h2 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h2><p>Inline级别的元素不需要从新行开始并且只占用需要的宽度。</p><h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><p>通过语义化元素赋予元素含义，比如<code>&lt;form&gt; &lt;table&gt; &lt;article&gt;</code>能清晰得说明自己的内容。</p><h1 id="几个值得一说的标签和属性"><a href="#几个值得一说的标签和属性" class="headerlink" title="几个值得一说的标签和属性"></a>几个值得一说的标签和属性</h1><h2 id="lt-head-gt"><a href="#lt-head-gt" class="headerlink" title="&lt;head&gt;"></a><code>&lt;head&gt;</code></h2><p>这个标签以前是让我比较迷茫的，不清楚里面需要写些什么。从定义上<code>&lt;head&gt;</code>是元数据容器，通常包含了文档标题、编码字符集、样式、链接、脚本等。值得一提的是可以通过<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>让页面适配不同设备。</p><h2 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="&lt;div&gt;"></a><code>&lt;div&gt;</code></h2><p>元素容器</p><h2 id="lt-span-gt"><a href="#lt-span-gt" class="headerlink" title="&lt;span&gt;"></a><code>&lt;span&gt;</code></h2><p>文本容器</p><h2 id="lt-image-gt"><a href="#lt-image-gt" class="headerlink" title="&lt;image&gt;"></a><code>&lt;image&gt;</code></h2><p>永远为image定义宽度和高度，否则页面可能在图像加载过程中闪动，预先定义好高度宽度在页面结构中图像的位置就被占住了，所以就不会因为图像加载导致页面变化。</p><h2 id="lt-iframe-gt"><a href="#lt-iframe-gt" class="headerlink" title="&lt;iframe&gt;"></a><code>&lt;iframe&gt;</code></h2><p>页面容器</p><h2 id="lt-p-gt-和-lt-pre-gt"><a href="#lt-p-gt-和-lt-pre-gt" class="headerlink" title="&lt;p&gt; 和 &lt;pre&gt;"></a><code>&lt;p&gt;</code> 和 <code>&lt;pre&gt;</code></h2><p>浏览器在显示页面时会移除多余的空格和换行，也就是说如果想在<code>&lt;p&gt;</code>里写首诗敲回车是没有用的。解决方法一是用<code>&lt;br&gt;</code>换行，二是用<code>&lt;pre&gt;</code>。<code>&lt;pre&gt;</code>表示格式化的文本，其中的内容会使用定宽字体显示，并保留所有的空格换行。</p><h2 id="lt-canvas-gt"><a href="#lt-canvas-gt" class="headerlink" title="&lt;canvas&gt;"></a><code>&lt;canvas&gt;</code></h2><p>画布，通过Javascript动态画图。</p><h2 id="lt-svg-gt"><a href="#lt-svg-gt" class="headerlink" title="&lt;svg&gt;"></a><code>&lt;svg&gt;</code></h2><p>SVG图的容器，通过XML定义2D图像。</p><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>一个通用的属性，用来实现元素的tooltip。</p><h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><p>指定文件路径时，绝对路径为完整的URL，相对路径如果以”/“开头表示从web根目录开始查找，否则表示从页面所在目录开始查找。href也是类似的。</p><h1 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h1><h2 id="lt-DOCTYPE-html-gt"><a href="#lt-DOCTYPE-html-gt" class="headerlink" title="&lt;!DOCTYPE html&gt;"></a><code>&lt;!DOCTYPE html&gt;</code></h2><p>看页面代码的时候这个地方一直让我很疑惑，见过很多种写法，跟XML的头一个感觉。这里实际上是一个文档类型的声明，来告诉浏览器如何正确解析HTML文档。HTML文档必须以这个定义开始，特别的这个定义方式<code>&lt;!DOCTYPE html&gt;</code>表示文档类型是html5。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.w3schools.com/html/default.asp" target="_blank" rel="noopener">HTML5 Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端方面的技术对我一直是一片空白区，本着越不熟悉的东西越能开拓眼界的想法，决定投入些时间学习一下。实际上react等等名词也是听烂了，好奇心驱使下也想去探究一番大家嘴里都在说的究竟是什么。还有一部分动机也是对组里现有Web项目的前端从技术选择到工程实现的全面厌恶(都不是品味
      
    
    </summary>
    
    
      <category term="HTML 前端" scheme="https://markvalen.github.io/tags/HTML-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://markvalen.github.io/2017/12/11/hello-world/"/>
    <id>https://markvalen.github.io/2017/12/11/hello-world/</id>
    <published>2017-12-11T13:14:10.366Z</published>
    <updated>2017-12-11T11:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
